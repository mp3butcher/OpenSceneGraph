/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield
 * Copyright (C) 2016 Julien Valentin
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSG_SUBROUTINEUNIFORM
#define OSG_SUBROUTINEUNIFORM 1

#include <osg/Export>
#include <osg/StateAttribute>
#include <osg/Program>


namespace osg
{

    class State;

    /**  Subroutine uniform
     *   OpenGL4 required
     *   https://www.opengl.org/registry/specs/ARB/shader_subroutine.txt
     */

    class OSG_EXPORT SubroutineUniform : public StateAttribute
    {
    public:
        SubroutineUniform():StateAttribute(),_shadertype(Shader::VERTEX),_program(NULL){}
        SubroutineUniform(Shader::Type shadertype ):StateAttribute(),_shadertype(shadertype),_program(NULL){}
        SubroutineUniform(const SubroutineUniform& rhs, const CopyOp& copyop=CopyOp::SHALLOW_COPY):StateAttribute(rhs,copyop)
        {
            _subroutineNames=rhs._subroutineNames;
            _shadertype=rhs._shadertype;
            _program=rhs._program;
        };

        META_StateAttribute(osg, SubroutineUniform, SUBROUTINEUNIFORM);

        ///add a routine name to be used in the program
        inline void addSubroutineName(const std::string & name)
        {
            _subroutineNames.push_back(name);
            _indicesSetted.setAllElementsTo(0);
        }

        ///add a routine name to be used in the program
        inline void removeSubroutineName(const std::string &name)
        {
            for(std::vector<std::string>::iterator it=_subroutineNames.begin(); it!=_subroutineNames.end(); it++)
            {
                if(*it == name)
                {
                    _subroutineNames.erase(it);
                    break;
                }
            }
        }

        inline unsigned int getNumSubroutineNames() const{      return _subroutineNames.size(); }
        inline const std::string &getSubroutineName(const unsigned int i) const{      return _subroutineNames[i]; }

        ///set the shader type whose subroutine names are from
        inline Shader::Type getShaderType() const{              return _shadertype;             }

        bool setShaderType( Shader::Type shadertype);

        virtual unsigned int getMember() const { return _shadertype; }

        //set the program
        void setProgram(Program *po){_program=po;}
        const Program* getProgram()const { return _program;}

        virtual void apply(State& state) const;

        virtual int compare(const StateAttribute& bb) const
        {
            COMPARE_StateAttribute_Types(SubroutineUniform, bb)
            COMPARE_StateAttribute_Parameter(_program)
            COMPARE_StateAttribute_Parameter(_subroutineNames)
            COMPARE_StateAttribute_Parameter(_shadertype)

            return 0;
        }

    protected:
        virtual ~SubroutineUniform();
        Shader::Type _shadertype;
        std::vector< std::string> _subroutineNames;
        ref_ptr<Program> _program;

        mutable buffered_object< std::vector<GLuint> > _indices;
        mutable buffered_object<GLushort> _indicesSetted;
    };

} // namespace osg

#endif
