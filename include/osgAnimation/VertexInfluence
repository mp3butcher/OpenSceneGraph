/*  -*-c++-*-
 *  Copyright (C) 2008 Cedric Pinson <cedric.pinson@plopbyte.net>
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGANIMATION_VERTEX_INFLUENCE
#define OSGANIMATION_VERTEX_INFLUENCE 1

#include <osg/Object>
#include <osgAnimation/Export>
#include <osgAnimation/Bone>
#include <osg/observer_ptr>
#include <map>
#include <vector>
#include <string>

namespace osgAnimation
{

    // first is bonename, and second the weight
    struct OSGANIMATION_EXPORT BoneWeight: public std::pair<std::string, float>
    {
        BoneWeight( std::string f,float s):
        std::pair<std::string,float>(f,s){}
        inline const std::string& getBoneName()const{return first;}
        inline void setBoneName(const std::string&s){first=s;}
        inline const float &getWeight()const{return second;}
        inline void setWeight(float i){second=i;}
    };
    // first is vertex index, and second the weight
    struct OSGANIMATION_EXPORT IndexWeight: public std::pair<unsigned int, float>
    {
        IndexWeight( unsigned int f,float s): std::pair<unsigned int,float>(f,s){}
        inline const unsigned int& getIndex()const{return first;}
        inline void setIndex(unsigned int i){first=i;}
        inline const float &getWeight()const{return second;}
        inline void setWeight(float i){second=i;}
    };


    typedef std::vector<IndexWeight> IndexWeightList;

    /// IndexWeightList attached to a bone
    class OSGANIMATION_EXPORT BoneInfluenceList : public IndexWeightList
    {
    public:
        const std::string& getBoneName() const { return _name;}
        void setBoneName(const std::string& name) { _name = name;}
    protected:
        std::string _name;
    };

    ///From BoneName To IndexWeightList of the bone
    class VertexInfluenceMap : public std::map<std::string, BoneInfluenceList> , public osg::Object
    {
    public:
        META_Object(osgAnimation, VertexInfluenceMap);

        VertexInfluenceMap() {}
        VertexInfluenceMap(const osgAnimation::VertexInfluenceMap& org, const osg::CopyOp& copyop):
            std::map<std::string, BoneInfluenceList>(org),
            osg::Object(org, copyop)
        {}
        ///cull weakest influences in order to fit targetted numbonepervertex
        void cullBoneInfluenceCountPerVertex(unsigned int maxnumbonepervertex, float minweight=0, bool renormalize=true);
        ///cull weakest bones in order to fit targetted numbonepermesh
        void cullBoneCountPerMesh(unsigned int numbonepermesh);
    };

/*
    // this class manage VertexInfluence database by mesh
    // reference bones per vertex ...
    class OSGANIMATION_EXPORT VertexInfluenceSet
    {
    public:
        typedef std::vector<BoneInfluenceList> BoneToVertexList;

        class BoneWeight
        {
        public:
            BoneWeight(const std::string& name, float weight, Bone *bptr=0) : _boneName(name), _weight(weight), _boneptr(bptr) {}
            BoneWeight(const BoneWeight &bw2) : _boneName(bw2._boneName), _weight(bw2._weight), _boneptr(bw2._boneptr) {}
            const std::string& getBoneName() const { return _boneName; }
            const Bone * getBonePtr()const{return _boneptr.get();}
            void setBonePtr(Bone*b){_boneptr=b;}
            float getWeight() const { return _weight; }
            void setWeight(float weight) { _weight = weight; }
            bool operator==(const BoneWeight& b) const { return (_boneName == b.getBoneName() && _weight == b.getWeight()); }
            //default order : sort by weight desc and bonename if equal
            /*bool operator<(const BoneWeight& bw2)const{        if (_weight > bw2._weight)return true;
            if (_weight < bw2._weight)return false;
            return(_boneName<bw2._boneName);
                                                     }* /
        protected:
            std::string _boneName;
            float _weight;
            osg::observer_ptr< Bone > _boneptr;
        };

        void addBoneInfluenceList(const BoneInfluenceList& v);

        typedef std::vector<BoneWeight> BoneWeightList;
        typedef std::vector<BoneWeightList> VertIDToBoneWeightList;

        void buildVertexToBoneWeightList(unsigned int numvertices);
        const VertIDToBoneWeightList& getVertexToBoneWeightList() const{return _vertex2Bones;}


        //map a set of boneinfluence to a list of vertex indices std::pair <BoneWeightList, std::vector<unsigned int>  >
        class VertexGroup
        {
        public:
            // set Influences of the VertexGroup
            void setBoneWeightList(BoneWeightList& bones) { _bones = bones;}
            // get Influences of the VertexGroup
            const BoneWeightList& getBoneWeightList() const { return _bones;}
            // set Vertex Indices of the VertexGroup
            std::vector<unsigned  int>& getVertIDs() { return _vertindices;}
            // get Vertex Indices of the VertexGroup
            const std::vector<unsigned  int>& getVertIDs() const { return _vertindices;}
        protected:
            std::vector<unsigned int> _vertindices;
            BoneWeightList _bones;            // here we could limit matrix operation by caching (weight * matrix)
        };

        typedef std::vector<VertexGroup> VertexGroupList;

        /** build the shorted vector of unique VertexGroups and their associated vert indices * /
        void buildUniqVertexGroupList();

        /** return a list of unique VertexGroups and their associated vert indices * /
        const VertexGroupList& getUniqVertexGroupList() const { return _uniqVertexSetToBoneSet;}

        void clear();

    protected:
        BoneToVertexList _bone2Vertexes;
        VertIDToBoneWeightList _vertex2Bones;
        VertexGroupList _uniqVertexSetToBoneSet;
    };
*/
}

#endif
