/*  -*-c++-*-
 *  Copyright (C) 2009 Cedric Pinson <cedric.pinson@plopbyte.net>
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
 */

#ifndef OSGANIMATION_RIG_TRANSFORM_HARDWARE
#define OSGANIMATION_RIG_TRANSFORM_HARDWARE 1

#include <osgAnimation/Export>
#include <osgAnimation/RigTransform>
#include <osgAnimation/VertexInfluence>
#include <osgAnimation/Bone>
#include <osg/Matrix>
#include <osg/Array>

namespace osgAnimation
{
    class RigGeometry;

    /// This class manage format for hardware skinning
    class OSGANIMATION_EXPORT RigTransformHardware : public RigTransform
    {
    public:

        RigTransformHardware();

        RigTransformHardware(const RigTransformHardware& rth, const osg::CopyOp& copyop);

        META_Object(osgAnimation,RigTransformHardware);

        typedef osg::Matrix MatrixType;
        typedef std::vector<osg::ref_ptr<osg::Vec4Array> > BoneWeightAttribList;
        typedef std::vector<osg::ref_ptr<Bone> > BonePalette;
        typedef std::map<std::string, unsigned int> BoneNamePaletteIndex;

        typedef std::vector<osg::Matrix> MatrixPalette;
        class IndexWeightEntry
        {
            unsigned int _boneIndex;
            float _boneWeight;
        public:
            IndexWeightEntry(unsigned int index=0, float weight=0.0f): _boneIndex(index), _boneWeight(weight){}
            IndexWeightEntry(const IndexWeightEntry&o): _boneIndex(o._boneIndex), _boneWeight(o._boneWeight){}
            bool operator <(const IndexWeightEntry &o)const{return (_boneIndex<o._boneIndex);}//if (_boneIndex<o._boneIndex)return true;if((_boneIndex>o._boneIndex))return false;return _boneWeight>o._boneWeight;}
            const unsigned int &getIndex() const { return _boneIndex; }
            const float &getWeight() const { return _boneWeight; }
        };
        typedef std::vector<std::vector<IndexWeightEntry> > VertexIndexWeightList;



        osg::Vec4Array* getVertexAttrib(unsigned int index);
        unsigned int getNumVertexAttrib();

        osg::Uniform* getMatrixPaletteUniform();
        void computeMatrixPaletteUniform(const osg::Matrix& transformFromSkeletonToGeometry, const osg::Matrix& invTransformFromSkeletonToGeometry);

        unsigned int getNumBonesPerVertex() const;
        unsigned int getNumVertexes() const;

        bool createPalette(unsigned int nbVertexes,const BoneMap& boneMap, const VertexInfluenceSet::VertIDToBoneWeightList& vertexIndexToBoneWeightMap);

        virtual void operator()(RigGeometry&);

        //virtual void prepareData(RigGeometry&);
        void setShader(osg::Shader*);

        const BoneNamePaletteIndex& getBoneNameToPalette() {
            return _boneNameToPalette;
        }

    protected:

        bool init(RigGeometry&);

        void createVertexAttribList(VertexIndexWeightList &_vertexIndexMatrixWeightList);
        osg::Uniform* createVertexUniform();

        unsigned int _bonesPerVertex;
        unsigned int _nbVertexes;

        BonePalette _bonePalette;
        BoneNamePaletteIndex _boneNameToPalette;
        BoneWeightAttribList _boneWeightAttribArrays;
        osg::ref_ptr<osg::Uniform> _uniformMatrixPalette;
        osg::ref_ptr<osg::Shader> _shader;

        bool _needInit;

        typedef std::vector<VertexInfluenceSet::BoneWeight> BoneWeightList;
       // typedef std::map<unsigned int,BoneWeightList> VertIDToBoneWeightList;
        VertexInfluenceSet::VertIDToBoneWeightList _vertex2Bones;
    };
}

#endif
