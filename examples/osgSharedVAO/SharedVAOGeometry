///Hacked Geometry in order to share VAS with other geoemtries
///only SharedVAOGeometry whose master is itsself actually create a VAS
class SharedVAOGeometry :public osg::Geometry
{
public:
    SharedVAOGeometry(const osg::Geometry &g,const osg::CopyOp&copyop=osg::CopyOp::SHALLOW_COPY):
        osg::Geometry(g,copyop),master(0){}

    //set geometry responsible of the shared vas and compute primset basevertices
    void setMaster(SharedVAOGeometry*m);

    virtual void compileGLObjects(osg::RenderInfo& renderInfo) const
    {
        osg::State& state = *renderInfo.getState();
        if (renderInfo.getState()->useVertexBufferObject(_supportsVertexBufferObjects && _useVertexBufferObjects))
        {
            unsigned int contextID = state.getContextID();
            osg::GLExtensions* extensions = state.get<osg::GLExtensions>();
            if (!extensions) return;

            typedef std::set<osg::BufferObject*> BufferObjects;
            BufferObjects bufferObjects;

            // first collect all the active unique BufferObjects
            if (_vertexArray.valid() && _vertexArray->getBufferObject()) bufferObjects.insert(_vertexArray->getBufferObject());
            if (_normalArray.valid() && _normalArray->getBufferObject()) bufferObjects.insert(_normalArray->getBufferObject());
            if (_colorArray.valid() && _colorArray->getBufferObject()) bufferObjects.insert(_colorArray->getBufferObject());
            if (_secondaryColorArray.valid() && _secondaryColorArray->getBufferObject()) bufferObjects.insert(_secondaryColorArray->getBufferObject());
            if (_fogCoordArray.valid() && _fogCoordArray->getBufferObject()) bufferObjects.insert(_fogCoordArray->getBufferObject());

            for(ArrayList::const_iterator itr = _texCoordList.begin();
                itr != _texCoordList.end();
                ++itr)
            {
                if (itr->valid() && (*itr)->getBufferObject()) bufferObjects.insert((*itr)->getBufferObject());
            }

            for(ArrayList::const_iterator itr = _vertexAttribList.begin();
                itr != _vertexAttribList.end();
                ++itr)
            {
                if (itr->valid() && (*itr)->getBufferObject()) bufferObjects.insert((*itr)->getBufferObject());
            }

            for(PrimitiveSetList::const_iterator itr = _primitives.begin();
                itr != _primitives.end();
                ++itr)
            {
                if ((*itr)->getBufferObject()) bufferObjects.insert((*itr)->getBufferObject());
            }

            //osg::ElapsedTime timer;

            // now compile any buffer objects that require it.
            for(BufferObjects::iterator itr = bufferObjects.begin();
                itr != bufferObjects.end();
                ++itr)
            {
                osg::GLBufferObject* glBufferObject = (*itr)->getOrCreateGLBufferObject(contextID);
                if (glBufferObject && glBufferObject->isDirty())
                {
                    // OSG_NOTICE<<"Compile buffer "<<glBufferObject<<std::endl;
                    glBufferObject->compileBuffer();
                }
            }

            // OSG_NOTICE<<"Time to compile "<<timer.elapsedTime_m()<<"ms"<<std::endl;

            // unbind the BufferObjects
            extensions->glBindBuffer(GL_ARRAY_BUFFER_ARB,0);
            extensions->glBindBuffer(GL_ELEMENT_ARRAY_BUFFER_ARB,0);

            if (state.useVertexArrayObject(_useVertexArrayObject) && !bufferObjects.empty())
            {
                osg::VertexArrayState* vas = 0;

                _vertexArrayStateList[contextID] = vas = createVertexArrayState(renderInfo);

                osg::State::SetCurrentVertexArrayStateProxy setVASProxy(state, vas);

                vas->bindVertexArrayObject();

                drawVertexArraysImplementation(renderInfo);

                ///MY embed EBO in VAO
                osg::Geometry::DrawElementsList drawelmts;
                this->getDrawElementsList(drawelmts);
                ///assume all drawelmt have the same bo
                if(!drawelmts.empty())     vas->bindElementBufferObject((*drawelmts.begin())->getBufferObject()->getGLBufferObject(contextID));
                vas->unbindVertexArrayObject();
                vas->setRequiresSetArrays(getDataVariance()==osg::Object::DYNAMIC);
                ///END MY
            }
        }
        else
        {
            Drawable::compileGLObjects(renderInfo);
        }
    }
    inline osg::VertexArrayState*  newcreateVertexArrayState(osg::RenderInfo&renderInfo)const
    {
        ///MY
        ///this line transforms createVertexArrayState into getOrCreateVertexArrayState(RenderInfo& renderInfo)
        ///avoiding overwriting of _vertexArrayStateList[cID] when vas is shared among several geometries
        if(_vertexArrayStateList[renderInfo.getContextID()])return _vertexArrayStateList[renderInfo.getContextID()];
        ///END MY
        osg::State& state = *renderInfo.getState();
        osg::VertexArrayState* vas = new osg::VertexArrayState(&state);

        // OSG_NOTICE<<"Creating new osg::VertexArrayState "<< vas<<std::endl;

        if (_vertexArray.valid()) vas->assignVertexArrayDispatcher();
        if (_colorArray.valid()) vas->assignColorArrayDispatcher();
        if (_normalArray.valid()) vas->assignNormalArrayDispatcher();
        if (_secondaryColorArray.valid()) vas->assignSecondaryColorArrayDispatcher();
        if (_fogCoordArray.valid()) vas->assignFogCoordArrayDispatcher();

        if (!_texCoordList.empty()) vas->assignTexCoordArrayDispatcher(_texCoordList.size());
        if (!_vertexAttribList.empty()) vas->assignVertexAttribArrayDispatcher(_vertexAttribList.size());

        if (state.useVertexArrayObject(_useVertexArrayObject))
        {
            // OSG_NOTICE<<"  Setup VertexArrayState to use VAO "<<vas<<std::endl;

            vas->generateVertexArrayObject();
        }
        else
        {
            // OSG_NOTICE<<"  Setup VertexArrayState to without using VAO "<<vas<<std::endl;
        }

        return vas;
    }
    SharedVAOGeometry * master;///the only Geometry that actually create a VAS
protected:
    virtual ~SharedVAOGeometry() {};
    virtual osg::VertexArrayState*  createVertexArrayState(osg::RenderInfo&ri)const
    {
        if(true){
            if(master!=this) //only master is its master
                return master->newcreateVertexArrayState(ri);
            if(getVertexArray())
            std::cout<<"master create vAS "<<this<<std::endl;}
            return newcreateVertexArrayState(ri);

      }
};

/**BaseVertex Primimitive Sets**/

class DrawArraysBaseVertex : public osg::DrawArrays
{
public:
    GLint _basevertex;SharedVAOGeometry *pate;
    DrawArraysBaseVertex(GLenum mode=0):
        osg::DrawArrays(mode) {}

    DrawArraysBaseVertex(const osg::DrawArrays& array,SharedVAOGeometry *g, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY):
        osg::DrawArrays(array,copyop)    {pate=g;}
    virtual void draw(osg::State& state, bool useVertexBufferObjects) const
    {
#if defined(OSG_GLES1_AVAILABLE) || defined(OSG_GLES2_AVAILABLE)
      GLenum mode = _mode;
      if (_mode==GL_QUADS)
      {
          state.drawQuads(_first+_basevertex, _count, _numInstances);
          return;
      }
      else if (mode==GL_POLYGON)
      {
          mode = GL_TRIANGLE_FAN;
      }
      else if (mode==GL_QUAD_STRIP)
      {
          mode = GL_TRIANGLE_STRIP;
      }
#if 0
            const osg::Array * array=pate->getVertexArray();
            if(!array)array=pate->getVertexAttribArray(0);
            array->getBufferObject()->getProfile()._size;
            osg::GLBufferObject* globj=array->getOrCreateGLBufferObject(state.getContextID());
            std::cerr<<pate<<"< "<<  globj->getOffset(array->getBufferIndex())/                (array->getElementSize()) << "== "<<_basevertex<<std::endl;
#endif
      if (_numInstances>=1) state.glDrawArraysInstanced(mode,_first+_basevertex,_count, _numInstances);
      else glDrawArrays(mode,_first+_basevertex,_count);
#else
      if (_numInstances>=1) state.glDrawArraysInstanced(_mode,_first+_basevertex,_count, _numInstances);
      else glDrawArrays(_mode,_first+_basevertex,_count);
#endif

    }
};
template< class T,unsigned int DrawType>
class DrawElementsBaseVertex : public T /*osg::DrawElementsUInt*/
{
public:
    DrawElementsBaseVertex(GLenum mode=0):
        T(mode) {}

    DrawElementsBaseVertex(const T& array, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY):
        T(array,copyop)
    {    }
    virtual osg::Object* cloneType() const
    {
        return new DrawElementsBaseVertex<T,DrawType>();
    }
    virtual osg::Object* clone(const osg::CopyOp& /*copyop*/) const
    {
        return NULL;
    }
    virtual bool isSameKindAs(const osg::Object* obj) const
    {
        return dynamic_cast<const DrawElementsBaseVertex<T,DrawType>*>(obj)!=NULL;
    }
    virtual const char* libraryName() const
    {
        return "osg";
    }
    virtual const char* className() const
    {
        return "DrawElementsBaseVertex<##T,##DrawType>";
    }

    virtual void draw(osg::State& state, bool useVertexBufferObjects) const
    {
        osg:: GLExtensions* ext = state.get<osg::GLExtensions>();

        GLenum mode = T::_mode;
#if defined(OSG_GLES1_AVAILABLE) || defined(OSG_GLES2_AVAILABLE)
        if (mode==GL_POLYGON) mode = GL_TRIANGLE_FAN;
        if (mode==GL_QUAD_STRIP) mode = GL_TRIANGLE_STRIP;
#endif

        if (useVertexBufferObjects)
        {
            osg::GLBufferObject* ebo = T::getOrCreateGLBufferObject(state.getContextID());
#if 0
            const osg::Array * array=pate->getVertexArray();
            if(!array)array=pate->getVertexAttribArray(0);
            array->getBufferObject()->getProfile()._size;
            osg::GLBufferObject* globj=array->getOrCreateGLBufferObject(state.getContextID());
            std::cerr<<pate<<"< "<<  globj->getOffset(array->getBufferIndex())/                (array->getElementSize()) << "== "<<_basevertex<<std::endl;
#endif
            if (ebo)
            {
                state.getCurrentVertexArrayState()->bindElementBufferObject(ebo);
                if (T::_numInstances>=1) ext->glDrawElementsInstancedBaseVertex(mode, T::size(), DrawType, (const GLvoid *)(ebo->getOffset(T::getBufferIndex())), T::_numInstances
                            ,_basevertex);
                else ext->glDrawElementsBaseVertex(mode, T::size(), DrawType, (const GLvoid *)(ebo->getOffset(T::getBufferIndex()))
                                                       ,_basevertex
                                                      );
            }
            else
            {
                state.getCurrentVertexArrayState()->unbindElementBufferObject();
                if (T::_numInstances>=1) state.glDrawElementsInstanced(mode, T::size(), DrawType, &T::front(), T::_numInstances);
                else glDrawElements(mode, T::size(), DrawType, &T::front());
            }
        }
        else
        {
            if (T::_numInstances>=1) state.glDrawElementsInstanced(mode, T::size(), DrawType, &T::front(), T::_numInstances);
            else glDrawElements(mode, T::size(), DrawType, &T::front());
        }
    }
    GLint _basevertex;
};
typedef DrawElementsBaseVertex<osg::DrawElementsUInt,GL_UNSIGNED_INT> DrawElementsBaseVertexUINT;
typedef DrawElementsBaseVertex<osg::DrawElementsUShort,GL_UNSIGNED_SHORT> DrawElementsBaseVertexUSHORT;
typedef DrawElementsBaseVertex<osg::DrawElementsUByte,GL_UNSIGNED_BYTE> DrawElementsBaseVertexUBYTE;
