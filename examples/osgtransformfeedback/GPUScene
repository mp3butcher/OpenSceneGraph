/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGSHADOW_GPUScene
#define OSGSHADOW_GPUScene 1

#include <osg/buffered_value>
#include <osg/Camera>
#include <osg/Texture2D>
#include <osg/TexGenNode>

#include "GPUDrawTechnique"


//namespace osgGPU {
/*class GPUDrawTechnique:public osg::Referenced{
public:
virtual void traverse(osg::NodeVisitor& nv)=0;
virtual void cleanSceneGraph()=0;
};*/
/** GPUScene provides a mechansim for decorating a scene which drawing will completely be manage by gpu.*/
/** It uses a combination of TransformFeedBack and IndirectDraw to cull and draw using 2 drawcall per possible batch*/
/**batching is based on stateSet sharing*/
/** It requires OpenGL4.3 feature like query_object_buffer */
class  GPUScene : public osg::Group
{
    public:

        GPUScene(GPUDrawTechnique* st=0);

        GPUScene(const GPUScene& es, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);

        META_Node(osgShadow, GPUScene);

        virtual void traverse(osg::NodeVisitor& nv);

        /*void setShadowSettings(ShadowSettings* ss);
        template<class T> void setShadowSettings(const osg::ref_ptr<T>& ss) { setShadowSettings(ss.get()); }

        ShadowSettings* getShadowSettings() { return _shadowSettings.get(); }
        const ShadowSettings* getShadowSettings() const { return _shadowSettings.get(); }
*/
        void setGPUDrawTechnique(GPUDrawTechnique* technique);
        template<class T> void setGPUDrawTechnique(const osg::ref_ptr<T>& ss) { setGPUDrawTechnique(ss.get()); }

        GPUDrawTechnique* getGPUDrawTechnique() { return _GPUDrawTechnique.get(); }
        const GPUDrawTechnique* getGPUDrawTechnique() const { return _GPUDrawTechnique.get(); }

        /** Clean scene graph from any shadow technique specific nodes, state and drawables.*/
        void cleanSceneGraph();

        /** Dirty any cache data structures held in the attached ShadowTechnqiue.*/
        void dirty();

        /** Resize any per context GLObject buffers to specified size. */
        virtual void resizeGLObjectBuffers(unsigned int maxSize);

        /** If State is non-zero, this function releases any associated OpenGL objects for
           * the specified graphics context. Otherwise, releases OpenGL objects
           * for all graphics contexts. */
        virtual void releaseGLObjects(osg::State* = 0) const;

    public:
#if 0
        /** deprecated, moved to ShadowSettings.*/
        void setReceivesShadowTraversalMask(unsigned int mask) { if (_shadowSettings.valid()) _shadowSettings->setReceivesShadowTraversalMask(mask); }
        /** deprecated, moved to ShadowSettings.*/
        unsigned int getReceivesShadowTraversalMask() const { return _shadowSettings.valid() ? _shadowSettings->getReceivesShadowTraversalMask() : 0xffffffff; }

        /** deprecated, moved to ShadowSettings.*/
        void setCastsShadowTraversalMask(unsigned int mask) { if (_shadowSettings.valid()) _shadowSettings->setCastsShadowTraversalMask(mask);  }
        /** deprecated, moved to ShadowSettings.*/
        unsigned int getCastsShadowTraversalMask() const { return _shadowSettings.valid() ? _shadowSettings->getCastsShadowTraversalMask() : 0xffffffff; }
#endif
protected:

        virtual ~GPUScene();

       // osg::ref_ptr<ShadowSettings>    _shadowSettings;
        osg::ref_ptr<GPUDrawTechnique>   _GPUDrawTechnique;

};

//}

#endif
